{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "8e784153f13a4c89235e1705089d196c061004c7398fb3794c7511272ae6346f",
          "withoutMetadata": "79fa878923816e4fa4ccee738f3ab590977c8576f6ef08f1a453920e55cb80d9",
          "linkedWithoutMetadata": "79fa878923816e4fa4ccee738f3ab590977c8576f6ef08f1a453920e55cb80d9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "scToken",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:8"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:20"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:21"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "11742d9921ad54bd2ea7107b1e2b8365b444ef1c31109fdca37a644aa2f6f524",
          "withoutMetadata": "9bd3bb4b7b14f7253f35c12b43d11a22099fab4d89d25a3ba7cd719789faeeec",
          "linkedWithoutMetadata": "9bd3bb4b7b14f7253f35c12b43d11a22099fab4d89d25a3ba7cd719789faeeec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "3f102cae0181a7040e3eafb058347ca9ca2e9cee721fe7c50b6d2c60dae4ec2c",
          "withoutMetadata": "8a1768d1f31a4841d534a72cc77f7cea64cdd300f485bb36bb6710547edcf96d",
          "linkedWithoutMetadata": "8a1768d1f31a4841d534a72cc77f7cea64cdd300f485bb36bb6710547edcf96d"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4805",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4805": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "a6912861604db13a9aa47715b58c29c4c80641fb3409a7c522bd301624229b55",
          "withoutMetadata": "73680aa57112d65d80e330870ae241fc778ef71ac52e4b4cf0c827210b161ea7",
          "linkedWithoutMetadata": "73680aa57112d65d80e330870ae241fc778ef71ac52e4b4cf0c827210b161ea7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "11742d9921ad54bd2ea7107b1e2b8365b444ef1c31109fdca37a644aa2f6f524",
          "withoutMetadata": "9bd3bb4b7b14f7253f35c12b43d11a22099fab4d89d25a3ba7cd719789faeeec",
          "linkedWithoutMetadata": "9bd3bb4b7b14f7253f35c12b43d11a22099fab4d89d25a3ba7cd719789faeeec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4867",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4867": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "613760aa2bf1f26ff3e9a438a36d597450ecec1d98308310b7128d77e67eab0e",
          "withoutMetadata": "d58a1ac7227e73a56a60e86b51c8fa64f342dab995bc9543b80eb1b86ec432dd",
          "linkedWithoutMetadata": "d58a1ac7227e73a56a60e86b51c8fa64f342dab995bc9543b80eb1b86ec432dd"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4872",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4872": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "31642ddf9b45863ffe62f7a7a5f36f008d6fe627da2d76a2cdb94ba0c54fb34d",
          "withoutMetadata": "3e78707202530b7aaa6658668fc8aa5b27b6608a0db51855eff85ff93b82f287",
          "linkedWithoutMetadata": "3e78707202530b7aaa6658668fc8aa5b27b6608a0db51855eff85ff93b82f287"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "11742d9921ad54bd2ea7107b1e2b8365b444ef1c31109fdca37a644aa2f6f524",
          "withoutMetadata": "9bd3bb4b7b14f7253f35c12b43d11a22099fab4d89d25a3ba7cd719789faeeec",
          "linkedWithoutMetadata": "9bd3bb4b7b14f7253f35c12b43d11a22099fab4d89d25a3ba7cd719789faeeec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4934",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4934": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "11742d9921ad54bd2ea7107b1e2b8365b444ef1c31109fdca37a644aa2f6f524",
          "withoutMetadata": "9bd3bb4b7b14f7253f35c12b43d11a22099fab4d89d25a3ba7cd719789faeeec",
          "linkedWithoutMetadata": "9bd3bb4b7b14f7253f35c12b43d11a22099fab4d89d25a3ba7cd719789faeeec"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "3f102cae0181a7040e3eafb058347ca9ca2e9cee721fe7c50b6d2c60dae4ec2c",
          "withoutMetadata": "8a1768d1f31a4841d534a72cc77f7cea64cdd300f485bb36bb6710547edcf96d",
          "linkedWithoutMetadata": "8a1768d1f31a4841d534a72cc77f7cea64cdd300f485bb36bb6710547edcf96d"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4805",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4805": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "a6912861604db13a9aa47715b58c29c4c80641fb3409a7c522bd301624229b55",
          "withoutMetadata": "73680aa57112d65d80e330870ae241fc778ef71ac52e4b4cf0c827210b161ea7",
          "linkedWithoutMetadata": "73680aa57112d65d80e330870ae241fc778ef71ac52e4b4cf0c827210b161ea7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "04eb04d660b61cecb54ee6cf42f2aa856ac54d0cf1b4e423d855a63820c1205d",
          "withoutMetadata": "414eaa72944f37175ba2be2c3d40a66a80c56ed079edb02d3177f214c9f51158",
          "linkedWithoutMetadata": "414eaa72944f37175ba2be2c3d40a66a80c56ed079edb02d3177f214c9f51158"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4867",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4867": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "04eb04d660b61cecb54ee6cf42f2aa856ac54d0cf1b4e423d855a63820c1205d",
          "withoutMetadata": "414eaa72944f37175ba2be2c3d40a66a80c56ed079edb02d3177f214c9f51158",
          "linkedWithoutMetadata": "414eaa72944f37175ba2be2c3d40a66a80c56ed079edb02d3177f214c9f51158"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "5874406bb3d82902e2e93a67da73050a4d88b96cd07ee7df129d9244a5315456",
          "withoutMetadata": "5831b9c8859f900ff0cd5075e86dac771c7f6a4202dcfdd8cf79d5105061e00c",
          "linkedWithoutMetadata": "5831b9c8859f900ff0cd5075e86dac771c7f6a4202dcfdd8cf79d5105061e00c"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4868",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4868": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "68df2425b33446ee5e20085f981fbc9c5873df0fb716b3663c7f9225b47c9d2b",
          "withoutMetadata": "f94608c545338af446526383aac6a711de59950aa5f5b4952cd1caca2d645ba7",
          "linkedWithoutMetadata": "f94608c545338af446526383aac6a711de59950aa5f5b4952cd1caca2d645ba7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "6c9e07b61700f034e2bd20fae54532d518d62020f07c0c9a7b70dd62c790478a",
          "withoutMetadata": "7048824a1271a52db631491c7029e864033bf6563b0d1380c3fc87bb4266ebcf",
          "linkedWithoutMetadata": "7048824a1271a52db631491c7029e864033bf6563b0d1380c3fc87bb4266ebcf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4930",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4930": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "1f038fbef35127f1650ed3ff2e73ba86b7fc10588b1b41b934a33babd1800915",
          "withoutMetadata": "c322c0a8b53939ebf42882f6daf5588595eb4ae5371f79d100de2f46b30e1c2d",
          "linkedWithoutMetadata": "c322c0a8b53939ebf42882f6daf5588595eb4ae5371f79d100de2f46b30e1c2d"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4856",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4856": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "ee843eaa1c54596eaa4d55f6a2160ab88f61da43b8c838d9741922c97e1d6d59",
          "withoutMetadata": "c215e8c78e985b8dc9c98f5f1b39e2023717650990ed086cc552d2f9b751dcaa",
          "linkedWithoutMetadata": "c215e8c78e985b8dc9c98f5f1b39e2023717650990ed086cc552d2f9b751dcaa"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "6c9e07b61700f034e2bd20fae54532d518d62020f07c0c9a7b70dd62c790478a",
          "withoutMetadata": "7048824a1271a52db631491c7029e864033bf6563b0d1380c3fc87bb4266ebcf",
          "linkedWithoutMetadata": "7048824a1271a52db631491c7029e864033bf6563b0d1380c3fc87bb4266ebcf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4918",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4918": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockCollateral": {
        "src": "contracts/mock/MockCollateral.sol:6",
        "version": {
          "withMetadata": "6c9e07b61700f034e2bd20fae54532d518d62020f07c0c9a7b70dd62c790478a",
          "withoutMetadata": "7048824a1271a52db631491c7029e864033bf6563b0d1380c3fc87bb4266ebcf",
          "linkedWithoutMetadata": "7048824a1271a52db631491c7029e864033bf6563b0d1380c3fc87bb4266ebcf"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "setUserCollateral(uint256)",
          "getUserCollateral(address,bytes32)",
          "setUserTotalCollateralInUsd(uint256)",
          "getUserTotalCollateralInUsd(address)",
          "setUserMinCollateralRatio(uint256)",
          "getUserMinCollateralRatio(address)",
          "setHasMinCRatio(uint256)",
          "getHasMinCRatio(address)",
          "setMaxRedeemableInUsd(uint256)",
          "getMaxRedeemableInUsd(address)",
          "setMaxRedeemable(uint256)",
          "getMaxRedeemable(address,bytes32)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "setCollateral(uint256)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockCollateral",
            "src": "contracts/mock/MockCollateral.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MockCollateral",
              "label": "usd",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/mock/MockCollateral.sol:7"
            },
            {
              "contract": "MockCollateral",
              "label": "userCollateral",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:13"
            },
            {
              "contract": "MockCollateral",
              "label": "userTotalCollateralInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:14"
            },
            {
              "contract": "MockCollateral",
              "label": "userMinCollateralRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:15"
            },
            {
              "contract": "MockCollateral",
              "label": "hasMinCRatio",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:16"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemableInUsd",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:17"
            },
            {
              "contract": "MockCollateral",
              "label": "maxRedeemable",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:18"
            },
            {
              "contract": "MockCollateral",
              "label": "collateral_",
              "type": "t_uint256",
              "src": "contracts/mock/MockCollateral.sol:19"
            }
          ],
          "types": {
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "f84d44d5541565a58970a2c109896a3d64a16f24d35d86f4deb403890a56d11f",
          "withoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287",
          "linkedWithoutMetadata": "e803a46f4c5fbd77f440a730afeda05f245bdd9ea729fd564b3db758b9d2b287"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "16eb39dd6b410fd28bc0f02f1f76524e71c401bbc70249fa2112f2336dbdd5bc",
          "withoutMetadata": "f68f19dd0835fb9b5e729106a66acbc390f482de0352b1e693ce3acdcda5a30f",
          "linkedWithoutMetadata": "f68f19dd0835fb9b5e729106a66acbc390f482de0352b1e693ce3acdcda5a30f"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "de61a656a56f38cfb7da6c5c9f54ebb7d02996b306757ea893d00a7fd2ec5ef0",
          "withoutMetadata": "a1139f39edfa883b5da6ae5f6e9bd4e59c04bb38f33afcdb779e14082ba76aff",
          "linkedWithoutMetadata": "a1139f39edfa883b5da6ae5f6e9bd4e59c04bb38f33afcdb779e14082ba76aff"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "0e9ebfd2c713dce38f474ce196bd4dd97382cb2c85550cf501bc6b9ad1d86759",
          "withoutMetadata": "8a96cd02ef04a7fafa1c01e9a6e8af359ebf94dc3c9d9dcebe09ae6c92ef15d0",
          "linkedWithoutMetadata": "8a96cd02ef04a7fafa1c01e9a6e8af359ebf94dc3c9d9dcebe09ae6c92ef15d0"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "5101f3f915611d516305cb27b0fe2730affa716b5a119e1950f0eb950b5de794",
          "withoutMetadata": "39742114e4942871ec0c9edc5ae747ffa99b6748627a025dc3746c94be34f027",
          "linkedWithoutMetadata": "39742114e4942871ec0c9edc5ae747ffa99b6748627a025dc3746c94be34f027"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "298477b0db8d82a17151eb6ce42e34b8f3d25d3ccdf932895ea3cb0f2feb59e0",
          "withoutMetadata": "02ed8c69732389f69dd5e349e05a8e84ae46c9ff1d8e7920ad14420ebaea3776",
          "linkedWithoutMetadata": "02ed8c69732389f69dd5e349e05a8e84ae46c9ff1d8e7920ad14420ebaea3776"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "13afccd0cd9b256da68641582f15dcb28f5154e6d0e02c84ba9f15bf6922e18b",
          "withoutMetadata": "c527ec985d3308a4d24387babe3f8a3520249ca7ee9675f03994a37e7f1ed788",
          "linkedWithoutMetadata": "c527ec985d3308a4d24387babe3f8a3520249ca7ee9675f03994a37e7f1ed788"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "552b6af47059104509c0a0be36851354b13d0b1558c422475b1b7d3d915e536f",
          "withoutMetadata": "39742114e4942871ec0c9edc5ae747ffa99b6748627a025dc3746c94be34f027",
          "linkedWithoutMetadata": "39742114e4942871ec0c9edc5ae747ffa99b6748627a025dc3746c94be34f027"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "70cabde738547b83340dad21d1b9297294022053860c7e128e064cf3e2b0d3b4",
          "withoutMetadata": "c113a7dc654223eb8a2465ffbc067b41bad057054273bcd6ba9c04e637e2074e",
          "linkedWithoutMetadata": "c113a7dc654223eb8a2465ffbc067b41bad057054273bcd6ba9c04e637e2074e"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WBNB": {
        "src": "contracts/mock/WBNB.sol:3",
        "version": {
          "withMetadata": "fbc69a9d818cc11f1fa5317c0ca81d70928a31addd72361d4ed594270d209062",
          "withoutMetadata": "6fc91f68270075e9a0418485b04fac57ff4945460dc26ddcf9b1fe3e2a86ea7a",
          "linkedWithoutMetadata": "6fc91f68270075e9a0418485b04fac57ff4945460dc26ddcf9b1fe3e2a86ea7a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/mock/WBNB.sol:4"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/mock/WBNB.sol:5"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/mock/WBNB.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WBNB",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/mock/WBNB.sol:4"
            },
            {
              "contract": "WBNB",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/mock/WBNB.sol:5"
            },
            {
              "contract": "WBNB",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/mock/WBNB.sol:6"
            },
            {
              "contract": "WBNB",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/mock/WBNB.sol:13"
            },
            {
              "contract": "WBNB",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/mock/WBNB.sol:14"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MockPrice": {
        "src": "contracts/mock/MockPrice.sol:4",
        "version": {
          "withMetadata": "3dc0526788575d4f7649e8b011f11ba2a26b1bdea2385ff866383dd2c1df9231",
          "withoutMetadata": "6749f439bf4f2b23ee1faa4e30e08bdecccc16fa966323311c4162cafc2407b0",
          "linkedWithoutMetadata": "6749f439bf4f2b23ee1faa4e30e08bdecccc16fa966323311c4162cafc2407b0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "getPrice(bytes32)",
          "setPrice(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MockPrice",
              "label": "prices",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "contracts/mock/MockPrice.sol:7"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9a4c51d59b7f0914bfa55eefecf04a46a696e17e771ff1e85121d0119a6fa033",
          "withoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e",
          "linkedWithoutMetadata": "e16a7dca055f3ceb0820d2cae0bf34b819824be2ff7ab58f0839bab64a0b354e"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "c0974553969e6b5d45b7a1e51e78a1f879214062b55675065dbdb517f3c51ab0",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "f95d06f5a2ceb0ac271355c90f9098451b1463c02a5e61a944b1572942339fdd",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "ee01b489798947ee0eb0b6009b43ecc3f2a93e6749147f21b440564e0dd67322",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "7f49b3f46d07d6efdba49d18c574392b28158d3374784c52fff6e42162c9052c",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "07af23d8cb8214aba2af74f3b983e8ba6ad07980f1d21b7ba02a1838ca81b4d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "bdda2419c17e4615fdd7f9b06f1ef298cd7afbd50624664e405b066361790cc8",
          "withoutMetadata": "25f43c7a410895c60d388fa63b92b4b9651fdb75b63ecf6cd24e63245917e5a0",
          "linkedWithoutMetadata": "25f43c7a410895c60d388fa63b92b4b9651fdb75b63ecf6cd24e63245917e5a0"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "d248097dd60bddc31341bf0802719882fdb4e1d7088b3f3b6f79fe97e202cece",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "8b964fdd2106ce7c9116f2cd213e79d16d4ebb2384a0fe7fdabdcfd64d441dbf",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeRouter01": {
        "src": "contracts/interfaces/defi/pancake.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeRouter02": {
        "src": "contracts/interfaces/defi/pancake.sol:40",
        "inherit": [
          "IPancakeRouter01"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FeeDistribution": {
        "src": "contracts/interfaces/defi/ellipsis.sol:51",
        "inherit": [],
        "libraries": [],
        "methods": [
          "exit()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LpTokenStaker": {
        "src": "contracts/interfaces/defi/ellipsis.sol:38",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StableSwap": {
        "src": "contracts/interfaces/defi/ellipsis.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add_liquidity(uint256[3],uint256)",
          "remove_liquidity_one_coin(uint256,int128,uint256)",
          "calc_token_amount(uint256[3],bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "7c9938f3a5005d074040c0b6216aae62623d9d807103cf1cbe4f88198596aebe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "d54132933f8cada4b51293cd00e67d3adb66009ff626ff2834884fbd48c72da0",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol:18",
        "version": {
          "withMetadata": "52502154e20fbd0c34cb04337f7a93553d0588f408e9a9fe0acf439da07bb0b4",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMathUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "baf9a92fa6a458121c41fa3fc899110a3d467c3ecd8b47dce92c4afe9fd5c49d",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:22",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
            },
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "b17a273ac5e79a208abf8a55ba14cf0bd831fabee6984953ede7111da72b0a00",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33",
        "version": {
          "withMetadata": "2a66636b6710d7c8d4e95ffe69ac4d4ef279848b1c42128c584875e2a14ecd46",
          "withoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393",
          "linkedWithoutMetadata": "c03b6846795d5dd699e34840db588c4efb6b23de48527900501c42f51ca47393"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/SafeERC20.sol:18",
        "version": {
          "withMetadata": "f69053fa90b75818b0f620823f7d28c0d2b4be91c28d9de84deb646ad1a11dfc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "781a0a991ce356b770167e2ebeae7b2933c70f85a744dfb41da5a1920c2031d1",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Connector": {
        "src": "contracts/connector/Connector.sol:9",
        "version": {
          "withMetadata": "89cfed738649f0a1226d699dbc169f3e5c0040a0f62ed40ddd6e29cacf6ca9f9",
          "withoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8",
          "linkedWithoutMetadata": "04eaeb2bc7ff680508c4e9fc472e86ab4fa46441290778affef9024f2a6d29e8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "(address,address,address)",
          "()",
          "emergencyWithdraw(address)",
          "isOwner()",
          "getUserCollateral(address)",
          "getUserTotalCollateralInUsd()",
          "getUserMinCollateralRatio()",
          "hasMinCRatio()",
          "maxRedeemableInUsd()",
          "maxRedeemable(address)",
          "stakeAndBuild(address,uint256,uint256)",
          "stakeAndBuildMax(address,uint256)",
          "collateral(address,uint256)",
          "burnAndUnstake(address,uint256,uint256)",
          "burnAndUnstakeMax(address,uint256)",
          "redeemMax(address)",
          "redeem(address,uint256)",
          "stringToBytes32(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Connector",
            "src": "contracts/connector/Connector.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Connector",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/connector/Connector.sol:13"
            },
            {
              "contract": "Connector",
              "label": "icollateral",
              "type": "t_contract(ICollateral)4885",
              "src": "contracts/connector/Connector.sol:14"
            },
            {
              "contract": "Connector",
              "label": "syUSD",
              "type": "t_contract(IERC20)2768",
              "src": "contracts/connector/Connector.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(ICollateral)4885": {
              "label": "contract ICollateral"
            },
            "t_contract(IERC20)2768": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ConnectorFactory": {
        "src": "contracts/connector/ConnectorFactory.sol:9",
        "version": {
          "withMetadata": "76d5c78fefdb20b585117cf44a2c8dd1e5ebd762ad155487a0d909b217628e29",
          "withoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7",
          "linkedWithoutMetadata": "6a37d1c1f73e4e55a4265c3830d14cb9b375b1b903e46920910a6dd21ad951f7"
        },
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__ConnectorFactory_init(address)",
          "createConnector(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ConnectorFactory",
              "label": "connectors",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/connector/ConnectorFactory.sol:11"
            },
            {
              "contract": "ConnectorFactory",
              "label": "collateral",
              "type": "t_address",
              "src": "contracts/connector/ConnectorFactory.sol:13"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ACSToken": {
        "src": "contracts/interfaces/defi/acryptos.sol:36",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSFarm": {
        "src": "contracts/interfaces/defi/acryptos.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "userInfo(address,address)",
          "pendingSushi(address,address)",
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "harvest(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ACryptoSVault": {
        "src": "contracts/interfaces/defi/acryptos.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AlpacaToken": {
        "src": "contracts/interfaces/defi/alpaca.sol:46",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FairLaunch": {
        "src": "contracts/interfaces/defi/alpaca.sol:18",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,uint256)",
          "withdraw(address,uint256,uint256)",
          "harvest(uint256)",
          "pendingAlpaca(uint256,address)",
          "userInfo(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVault": {
        "src": "contracts/interfaces/defi/alpaca.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "totalToken()",
          "totalSupply()",
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ALPHAToken": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:14",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Bank": {
        "src": "contracts/interfaces/defi/alphaHomora.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalBNB()",
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOFarm": {
        "src": "contracts/interfaces/defi/autoFarm.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "stakedWantTokens(uint256,address)",
          "pendingAUTO(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AUTOToken": {
        "src": "contracts/interfaces/defi/autoFarm.sol:15",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBank": {
        "src": "contracts/interfaces/defi/fortube.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256)",
          "withdraw(address,uint256)",
          "withdrawUnderlying(address,uint256)",
          "borrow(address,uint256)",
          "repay(address,uint256)",
          "controller()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBankController": {
        "src": "contracts/interfaces/defi/fortube.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getAssetsIn(address)",
          "getAccountLiquidity(address)",
          "getFTokeAddress(address)",
          "isFTokenValid(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFToken": {
        "src": "contracts/interfaces/defi/fortube.sol:49",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "calcBalanceOfUnderlying(address)",
          "borrowBalanceStored(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IMiningReward": {
        "src": "contracts/interfaces/defi/fortube.sol:41",
        "inherit": [],
        "libraries": [],
        "methods": [
          "rewardToken()",
          "claimReward()",
          "checkBalance(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVBNB": {
        "src": "contracts/interfaces/defi/venus.sol:24",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow()",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVToken": {
        "src": "contracts/interfaces/defi/venus.sol:40",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "redeemUnderlying(uint256)",
          "borrow(uint256)",
          "repayBorrow(uint256)",
          "balanceOfUnderlying(address)",
          "borrowBalanceCurrent(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVenusDistribution": {
        "src": "contracts/interfaces/defi/venus.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimVenus(address)",
          "enterMarkets(address[])",
          "exitMarket(address)",
          "getAssetsIn(address)",
          "getAccountLiquidity(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICollateral": {
        "src": "contracts/interfaces/synth/ICollateral.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "issuer()",
          "hasMinCRatio(address)",
          "getUserCollateral(address,bytes32)",
          "getUserTotalCollateralInUsd(address)",
          "maxRedeemableInUsd(address)",
          "maxRedeemable(address,bytes32)",
          "getUserMinCollateralRatio(address)",
          "stakeAndBuild(bytes32,uint256,uint256)",
          "stakeAndBuildMax(bytes32,uint256)",
          "burnAndUnstake(uint256,bytes32,uint256)",
          "burnAndUnstakeMax(uint256,bytes32)",
          "collateral(bytes32,uint256)",
          "redeemMax(bytes32)",
          "redeem(bytes32,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPrices": {
        "src": "contracts/interfaces/synth/IPrices.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getPrice(bytes32)",
          "getPriceAndUpdatedTime(bytes32)",
          "isStale(bytes32)",
          "stalePeriod()",
          "exchange(bytes32,uint256,bytes32)",
          "exchangeAndPrices(bytes32,uint256,bytes32)",
          "LUSD()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MockERC20": {
        "src": "contracts/mock/MockERC20.sol:12",
        "version": {
          "withMetadata": "fb029a63d4fdb4c1df5cdf075fce9478e02ba29a71f709b5957f3986834ab62f",
          "withoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18",
          "linkedWithoutMetadata": "bb3ae20ab9ae4fd36c37553e630959895a1f5df82135fd5cbada816f0be23b18"
        },
        "inherit": [
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mock/MockERC20.sol:13"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StrategyBase": {
        "src": "contracts/strategies/StrategyBase.sol:11",
        "inherit": [
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "wantLockedTotal()",
          "wantLockedLocal()",
          "wantLockedPrincipal()",
          "deposit(uint256)",
          "withdraw(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "setBuyBackAddress(address)",
          "setGov(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyBase",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:16"
            },
            {
              "contract": "StrategyBase",
              "label": "lastEarnBlock",
              "type": "t_uint256",
              "src": "contracts/strategies/StrategyBase.sol:18"
            },
            {
              "contract": "StrategyBase",
              "label": "buyBackAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyBase.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyIdle": {
        "src": "contracts/strategies/StrategyIdle.sol:5",
        "version": {
          "withMetadata": "9f704f35e925ec7af5200665838f7cd88f9c66f92193bf2b417ae3e57d393294",
          "withoutMetadata": "3597c189c85843eeb92a9d75090eefc82e1db72dafe0519e97d124904d795409",
          "linkedWithoutMetadata": "3597c189c85843eeb92a9d75090eefc82e1db72dafe0519e97d124904d795409"
        },
        "inherit": [
          "StrategyBase",
          "PausableUpgradeable",
          "ReentrancyGuardUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__StrategyIdle_init(address,address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "pause()",
          "unpause()",
          "wantLockedPrincipal()",
          "wantLockedTotal()",
          "wantLockedLocal()",
          "setGov(address)",
          "setBuyBackAddress(address)",
          "emergencyWithdraw(address,uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyIdle",
              "label": "wantAddress",
              "type": "t_address",
              "src": "contracts/strategies/StrategyIdle.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BaseToken": {
        "src": "contracts/tokens/BaseToken.sol:13",
        "inherit": [
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable",
          "AddressUpgradeable",
          "SafeMathUpgradeable"
        ],
        "methods": [
          "deposit(uint256,uint256)",
          "depositBNB(uint256)",
          "pauseDeposit()",
          "unpauseDeposit()",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "pauseWithdraw()",
          "unpauseWithdraw()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "setGovAddress(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "BaseToken",
              "label": "token",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:18"
            },
            {
              "contract": "BaseToken",
              "label": "govAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:20"
            },
            {
              "contract": "BaseToken",
              "label": "priceGetter",
              "type": "t_contract(IPrices)4947",
              "src": "contracts/tokens/BaseToken.sol:22"
            },
            {
              "contract": "BaseToken",
              "label": "isWbnb",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:26"
            },
            {
              "contract": "BaseToken",
              "label": "wbnbAddress",
              "type": "t_address",
              "src": "contracts/tokens/BaseToken.sol:28"
            },
            {
              "contract": "BaseToken",
              "label": "depositPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:30"
            },
            {
              "contract": "BaseToken",
              "label": "withdrawPaused",
              "type": "t_bool",
              "src": "contracts/tokens/BaseToken.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IPrices)4947": {
              "label": "contract IPrices"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWBNB": {
        "src": "contracts/tokens/SingleSCToken.sol:7",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SingleSCToken": {
        "src": "contracts/tokens/SingleSCToken.sol:13",
        "version": {
          "withMetadata": "b84d595e5479e3a2d4911e1a34a754fee5306ce3356e21840e29bfb93323515d",
          "withoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71",
          "linkedWithoutMetadata": "cdab224cf635b20784fee2d0805c846c91b1e3c00e88d9b2501b7bf2b6d10f71"
        },
        "inherit": [
          "BaseToken",
          "ReentrancyGuardUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "__SingleSCToken_init(address,string,string,address,address,address,address)",
          "depositBNB(uint256)",
          "deposit(uint256,uint256)",
          "_deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawBNB(uint256,uint256)",
          "approveToken()",
          "balance()",
          "balanceStrategy()",
          "calcPoolValueInToken()",
          "getPricePerFullShare()",
          "getPrice()",
          "sharesToAmount(uint256)",
          "amountToShares(uint256)",
          "emergencyWithdraw(address,uint256,address)",
          "stringToBytes32(string)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SingleSCToken",
              "label": "strategy",
              "type": "t_address",
              "src": "contracts/tokens/SingleSCToken.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}